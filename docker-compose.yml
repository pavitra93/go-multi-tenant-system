version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: multi_tenant_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: multi_tenant_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
      - ./database/docker-entrypoint.sh:/docker-entrypoint-initdb.d/docker-entrypoint.sh
    networks:
      - multi-tenant-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - multi-tenant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - multi-tenant-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - multi-tenant-network

  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=multi_tenant_db
      - AWS_REGION=${AWS_REGION}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - multi-tenant-network

  tenant-service:
    build:
      context: .
      dockerfile: services/tenant/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=multi_tenant_db
    depends_on:
      - postgres
    networks:
      - multi-tenant-network

  location-service:
    build:
      context: .
      dockerfile: services/location/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=multi_tenant_db
      - KAFKA_BROKER=kafka:29092
    depends_on:
      - postgres
      - kafka
    networks:
      - multi-tenant-network

  streaming-service:
    build:
      context: .
      dockerfile: services/streaming/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - KAFKA_BROKER=kafka:29092
      - THIRD_PARTY_ENDPOINT=${THIRD_PARTY_ENDPOINT}
    depends_on:
      - kafka
    networks:
      - multi-tenant-network

  api-gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - TENANT_SERVICE_URL=http://tenant-service:8002
      - LOCATION_SERVICE_URL=http://location-service:8003
      - STREAMING_SERVICE_URL=http://streaming-service:8004
      - AWS_REGION=${AWS_REGION}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=multi_tenant_db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - auth-service
      - tenant-service
      - location-service
      - streaming-service
      - redis
    networks:
      - multi-tenant-network

volumes:
  postgres_data:
  redis_data:

networks:
  multi-tenant-network:
    driver: bridge
